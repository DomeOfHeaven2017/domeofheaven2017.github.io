<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown基本语法速查</title>
    <link href="/2020/03/27/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/"/>
    <url>/2020/03/27/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="MarkDown基本语法"><a href="#MarkDown基本语法" class="headerlink" title="MarkDown基本语法"></a>MarkDown基本语法</h4><hr><ol><li><p>简介</p><blockquote><p><strong>Markdown</strong>是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，当前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。如GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。</p><p>​                                                                                                                            —WikiPedia</p></blockquote></li><li><p>基本命令</p><ul><li><p>标题</p><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><span class="hljs-section">## 二级标题</span><span class="hljs-section">### 三级标题</span><span class="hljs-section">#### 四级标题</span><span class="hljs-section">##### 五级标题</span><span class="hljs-section">###### 六级标题</span></code></pre></li><li><p>字体</p></li></ul></li></ol><pre><code>**加粗***斜体*~~删除线~~&lt;u&gt;下划线&lt;/u&gt;`注释`==高亮==</code></pre><ul><li>列表</li></ul><pre><code>## 有序列表1. 2. 3. ## 无序列表- - - ## 任务列表- [ ] 任务1- [ ] 任务2- [x] 任务3 </code></pre><ul><li>引用</li></ul><pre><code>&gt; 这是引用部分内容</code></pre><ul><li>代码块</li></ul><pre><code>​<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; &#125;​</code></pre></code></pre><ul><li>表格</li></ul><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><ul><li>目录</li></ul><pre><code>[TOC]</code></pre><ul><li><p>链接</p><ul><li>超链接</li></ul></li></ul><pre><code>  [链接名称](链接地址)- 图片链接  ![图片名称](图片地址)</code></pre><ul><li>脚注</li></ul><pre><code>You can create footnotes like this[^footnote].[^footnote]: Here is the *text* of the **footnote**.</code></pre><ul><li>Emoji表情</li></ul><pre><code>:smile::kissing_smiling_eyes::kissing_smiling_eyes:</code></pre><ul><li>视频</li></ul><pre><code>&lt;video src=&quot;xxx.mp4&quot;</code></pre><ul><li>HTML</li></ul><pre><code>&lt;span style=&quot;color:red&quot;&gt;红色的文本&lt;/span&gt;</code></pre><ol start="3"><li><p>绘制结构图</p><ul><li>流程图</li></ul></li></ol><pre><code>## Flowchart.js​<pre><code class="hljs flow">st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op    ## Mermaid​&lt;pre class=&quot;mermaid&quot;&gt;     graph LRA[Hard edge] --&gt;B(Round edge)    B --&gt; C&#123;Decision&#125;    C --&gt;|One| D[Result one]    C --&gt;|Two| E[Result two]​&lt;/pre&gt;</code></pre></code></pre><ul><li>时序图</li></ul><pre><code>## js-sequence​<pre><code class="hljs sequence">Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!​</code></pre>## Mermaid​&lt;pre class=&quot;mermaid&quot;&gt;     %% Example of sequence diagram  sequenceDiagram    Alice-&gt;&gt;Bob: Hello Bob, how are you?    alt is sick    Bob-&gt;&gt;Alice: Not so good :(    else is well    Bob-&gt;&gt;Alice: Feeling fresh like a daisy    end    opt Extra response    Bob-&gt;&gt;Alice: Thanks for asking    end​&lt;/pre&gt;</code></pre><ul><li>甘特图</li></ul><pre><code>## Mermaid​&lt;pre class=&quot;mermaid&quot;&gt;     %% Example with selection of syntaxes        gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section A section        Completed task            :done,    des1, 2014-01-06,2014-01-08        Active task               :active,  des2, 2014-01-09, 3d        Future task               :         des3, after des2, 5d        Future task2               :         des4, after des3, 5d​&lt;/pre&gt;</code></pre><ul><li>类图</li></ul><pre><code>## Mermaid​&lt;pre class=&quot;mermaid&quot;&gt;     classDiagram      Animal &lt;|-- Duck      Animal &lt;|-- Fish      Animal &lt;|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck{          +String beakColor          +swim()          +quack()      }      class Fish{          -int sizeInFeet          -canEat()      }      class Zebra{          +bool is_wild          +run()      }​&lt;/pre&gt;</code></pre><ul><li>状态图</li></ul><pre><code>​&lt;pre class=&quot;mermaid&quot;&gt;     stateDiagram    [*] --&gt; Still    Still --&gt; [*]    Still --&gt; Moving    Moving --&gt; Still    Moving --&gt; Crash    Crash --&gt; [*]​&lt;/pre&gt;<pre><code class="hljs undefined">   - 饼图     ​&lt;pre class=&quot;mermaid&quot;&gt;     pie         title Pie Chart         &quot;Dogs&quot; : 386         &quot;Cats&quot; : 85         &quot;Rats&quot; : 150      ​&lt;/pre&gt;4. 数学公式   ```markdown   ## 行内公式   $ a^2 + b^2 = c^2 $   ## 行间公式   $$    y = x ^ &#123;2&#125;    x_&#123;a + b&#125;     x^&#123;a + b&#125;   $$</code></pre></code></pre><table><thead><tr><th>符号</th><th>代码</th><th>具体含义</th></tr></thead><tbody><tr><td>$\sum$</td><td><code>$\sum$</code></td><td>求和公式</td></tr><tr><td>$\sum_{i=0}^n$</td><td><code>$\sum_{i=0}^n$</code></td><td>求和上下标</td></tr><tr><td>$\times$</td><td><code>$\times$</code></td><td>乘号</td></tr><tr><td>$\pm$</td><td><code>$\pm$</code></td><td>正负号</td></tr><tr><td>$\div$</td><td><code>$\div$</code></td><td>除号</td></tr><tr><td>$\mid$</td><td><code>$\mid$</code></td><td>竖线</td></tr><tr><td>$\cdot$</td><td><code>$\cdot$</code></td><td>点</td></tr><tr><td>$\circ$</td><td><code>$\circ$</code></td><td>圈</td></tr><tr><td>$\ast $</td><td><code>$\ast $</code></td><td>星号</td></tr><tr><td>$\bigotimes$</td><td><code>$\bigotimes$</code></td><td>克罗内克积</td></tr><tr><td>$\bigoplus$</td><td><code>$\bigoplus$</code></td><td>异或</td></tr><tr><td>$\leq$</td><td><code>$\leq$</code></td><td>小于等于</td></tr><tr><td>$\geq$</td><td><code>$\geq$</code></td><td>大于等于</td></tr><tr><td>$\neq$</td><td><code>$\neq$</code></td><td>不等于</td></tr><tr><td>$\approx$</td><td><code>$\approx$</code></td><td>约等于</td></tr><tr><td>$\prod$</td><td><code>$\prod$</code></td><td>N元乘积</td></tr><tr><td>$\coprod$</td><td><code>$\coprod$</code></td><td>N元余积</td></tr><tr><td>$\cdots$</td><td><code>$\cdots$</code></td><td>省略号</td></tr><tr><td>$\int$</td><td><code>$\int$</code></td><td>积分</td></tr><tr><td>$\iint$</td><td><code>$\iint$</code></td><td>双重积分</td></tr><tr><td>$\oint$</td><td><code>$\oint$</code></td><td>曲线积分</td></tr><tr><td>$\infty$</td><td><code>$\infty$</code></td><td>无穷</td></tr><tr><td>$\nabla$</td><td><code>$\nabla$</code></td><td>梯度</td></tr><tr><td>$\because$</td><td><code>$\because$</code></td><td>因为</td></tr><tr><td>$\therefore$</td><td><code>$\therefore$</code></td><td>所以</td></tr><tr><td>$\forall$</td><td><code>$\forall$</code></td><td>任意</td></tr><tr><td>$\exists$</td><td><code>$\exists$</code></td><td>存在</td></tr><tr><td>$\not=$</td><td><code>$\not=$</code></td><td>不等于</td></tr><tr><td>$\not&gt;$</td><td><code>$\not&gt;$</code></td><td>不大于</td></tr><tr><td>$\leq$</td><td><code>$\leq$</code></td><td>小于等于</td></tr><tr><td>$\geq$</td><td><code>$\geq$</code></td><td>大于等于</td></tr><tr><td>$\not\subset$</td><td><code>$\not\subset$</code></td><td>不属于</td></tr><tr><td>$\emptyset$</td><td><code>$\emptyset$</code></td><td>空集</td></tr><tr><td>$\in$</td><td><code>$\in$</code></td><td>属于</td></tr><tr><td>$\notin$</td><td><code>$\notin$</code></td><td>不属于</td></tr><tr><td>$\subset$</td><td><code>$\subset$</code></td><td>子集</td></tr><tr><td>$\subseteq$</td><td><code>$\subseteq$</code></td><td>真子集</td></tr><tr><td>$\bigcup$</td><td><code>$\bigcup$</code></td><td>并集</td></tr><tr><td>$\bigcap$</td><td><code>$\bigcap$</code></td><td>交集</td></tr><tr><td>$\bigvee$</td><td><code>$\bigvee$</code></td><td>逻辑或</td></tr><tr><td>$\bigwedge$</td><td><code>$\bigwedge$</code></td><td>逻辑与</td></tr><tr><td>$\alpha$</td><td><code>$\alpha$</code></td><td></td></tr><tr><td>$\beta$</td><td><code>$\beta$</code></td><td></td></tr><tr><td>$\gamma$</td><td><code>$\gamma$</code></td><td></td></tr><tr><td>$\Gamma$</td><td><code>$\Gamma$</code></td><td></td></tr><tr><td>$\delta$</td><td><code>$\delta$</code></td><td></td></tr><tr><td>$\Delta$</td><td><code>$\Delta$</code></td><td></td></tr><tr><td>$\epsilon$</td><td><code>$\epsilon$</code></td><td></td></tr><tr><td>$\varepsilon$</td><td><code>$\varepsilon$</code></td><td></td></tr><tr><td>$\zeta$</td><td><code>$\zeta$</code></td><td></td></tr><tr><td>$\eta$</td><td><code>$\eta$</code></td><td></td></tr><tr><td>$\theta$</td><td><code>$\theta$</code></td><td></td></tr><tr><td>$\Theta$</td><td><code>$\Theta$</code></td><td></td></tr><tr><td><em>ϑ</em></td><td><code>$\vartheta$</code></td><td></td></tr><tr><td><em>ι</em></td><td><code>$\iota$</code></td><td></td></tr><tr><td><em>π</em></td><td><code>$\pi$</code></td><td></td></tr><tr><td><em>ϕ</em></td><td><code>$\phi$</code></td><td></td></tr><tr><td>Φ</td><td><code>$\Phi$</code></td><td></td></tr><tr><td><em>ψ</em></td><td><code>$\psi$</code></td><td></td></tr><tr><td>Ψ</td><td><code>$\Psi$</code></td><td></td></tr><tr><td><em>ω</em></td><td><code>$\omega$</code></td><td></td></tr><tr><td>Ω</td><td><code>$\Omega$</code></td><td></td></tr><tr><td><em>χ</em></td><td><code>\chi</code></td><td></td></tr><tr><td><em>ρ</em></td><td><code>$\rho$</code></td><td></td></tr><tr><td><em>ο</em></td><td><code>$\omicron$</code></td><td></td></tr><tr><td><em>σ</em></td><td><code>$\sigma$</code></td><td></td></tr><tr><td>Σ</td><td><code>$\Sigma$</code></td><td></td></tr><tr><td><em>ν</em></td><td><code>$\nu$</code></td><td></td></tr><tr><td><em>ξ</em></td><td><code>$\xi$</code></td><td></td></tr><tr><td><em>τ</em></td><td><code>$\tau$</code></td><td></td></tr><tr><td><em>λ</em></td><td><code>$\lambda$</code></td><td></td></tr><tr><td>Λ</td><td><code>$\Lambda$</code></td><td></td></tr><tr><td><em>μ</em></td><td><code>\mu</code></td><td></td></tr><tr><td>∂</td><td><code>$\partial$</code></td><td></td></tr><tr><td>{}</td><td><code>$\lbrace \rbrace$</code></td><td></td></tr><tr><td><em>a</em></td><td><code>$\overline{a}$</code></td></tr></tbody></table><p>​     </p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ProtocolBuffers-基本使用</title>
    <link href="/2020/03/12/ProtocolBuffers-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/03/12/ProtocolBuffers-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a>Protocol Buffers</h4><p>​    <em>一种跨语言，跨平台的可扩展的序列化数据格式</em></p><ol><li><p>相比XML的优势</p><ul><li>更简单</li><li>更轻量（数据体积小3~10倍）</li><li>更快速（20～100倍）</li><li>自动化生成更易于编码方式使用的数据访问类</li></ul></li><li><p>使用方法</p><pre class="mermaid">   graph TD;   A[定义protobuf消息格式]　--> B[编译protobuf];   B --> C[使用protobuf API进行读写];</pre><ol><li><p>使用protobuf语法描述需要存储的数据结构（编写．proto文件）</p><pre><code class="hljs protobuf">syntax = <span class="hljs-string">"proto3"</span>; <span class="hljs-comment">//默认为proto2,不能为空</span><span class="hljs-keyword">package</span> tutorial;　<span class="hljs-comment">//避免命名冲突</span><span class="hljs-keyword">option</span> java_package = <span class="hljs-string">"com.example.tutorial"</span>;　<span class="hljs-comment">//生成类的包结构</span><span class="hljs-keyword">option</span> java_outer_classname = <span class="hljs-string">"AddressBookProtos"</span>;　<span class="hljs-comment">//生成包括当前文件所有类的类名，默认是MyProto,生成my_proto.proto，不能与内部定义的类名称相同（不能设为AddressBook）</span><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Person</span> </span>&#123;   <span class="hljs-built_in">string</span> name = <span class="hljs-number">1</span>;　<span class="hljs-comment">//用于二进制编码的唯一标识</span>   <span class="hljs-built_in">int32</span> id = <span class="hljs-number">2</span>;   <span class="hljs-built_in">string</span> email = <span class="hljs-number">3</span>;  <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">PhoneType</span> </span>&#123;    MOBILE = <span class="hljs-number">0</span>;　<span class="hljs-comment">//必须包含标识０，用于设置默认值和与proto2语义兼容</span>    HOME = <span class="hljs-number">1</span>;    WORK = <span class="hljs-number">2</span>;  &#125;  <span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">PhoneNumber</span> </span>&#123;     <span class="hljs-built_in">string</span> number = <span class="hljs-number">1</span>;     PhoneType type = <span class="hljs-number">2</span> [packed = HOME];  &#125;   PhoneNumber phones = <span class="hljs-number">4</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">AddressBook</span> </span>&#123;   Person people = <span class="hljs-number">1</span>;&#125;</code></pre><blockquote><p>基本语法（proto3）：</p><ol><li><p>消息是各种类型数据的集合，</p></li><li><p>可以包含<code>bool</code>,<code>int32</code>,<code>float</code>,<code>double</code>,<code>string</code>,枚举或者其他的消息</p></li><li><p>标识的范围为1 ~ 2^29^ - 1,1~15的标识比较高的数字少一个字节进行编码，适宜一些常用或者重复的字段;16以上的适用不太常使用的可选字段;19000 ~ 19999不可使用，为内置保留．</p></li><li><p>每个字段都必须标明注解：</p><ol><li><code>required</code>:该字段必须设置值，否则该消息将被视为“未初始化”,构建未初始化的消息将抛出RuntimeException,解析未初始化的消息将抛出IOException;除此之外与<code>optional</code>一致</li><li><code>optional</code>:该字段是可选字段，可以设置值也可以不设置值。如果不设置值，则使用默认值．</li><li><code>repeated</code>:该字段可以重复任意次数（包括零），重复值的顺序将保留在<strong>protobuf</strong>中。可将其视为动态大小的数组．</li></ol></li><li><p>Any字段：</p><pre><code class="hljs protobuf">&gt;    import "google/protobuf/any.proto";&gt;    &gt;    message ErrorStatus &#123;&gt;      string message = 1;&gt;      google.protobuf.Any details = 2;&gt;    &#125;&gt;</code></pre></li></ol></blockquote><blockquote><ol start="6"><li><p>Oneof字段：</p></li><li><p>一个.proto文件中可以定义多种消息</p></li><li><p>每个message类以及它的子类有自己的<code>builder</code>类 ，通过<code>builder</code>类来进行设置</p></li><li><p>数据类型</p></li><li><p>不能在proto3中直接导入proto2的枚举进行使用，要导入其消息．</p></li><li><p>Map类型</p><pre><code class="hljs protobuf">&gt;     map&lt;key_type, value_type&gt; map_field = N;&gt;     map&lt;<span class="hljs-built_in">string</span>, Project&gt; projects = <span class="hljs-number">3</span>;&gt;</code></pre></li></ol></blockquote><blockquote><pre><code>1. `key_type` 可以是任何 int 或者 string 类型(任何的标量类型，具体可以见上面标量类型对应表格，但是要除去 float、double 和 bytes)2. `value_type` 可以是除去 map 以外的任何类型。</code></pre><ol start="12"><li><p>定义service</p><p>如果要使用 RPC（远程过程调用）系统的消息类型，可以在 <code>.proto</code> 文件中定义 RPC 服务接口，protocol buffer 编译器将使用所选语言生成服务接口代码和 stubs</p><pre><code class="hljs protobuf">&gt;     <span class="hljs-comment">//参数为SearchRequest,返回值为SearchResponse</span>&gt;     <span class="hljs-class"><span class="hljs-keyword">service</span> <span class="hljs-title">SearchService</span> </span>&#123;&gt;       <span class="hljs-function"><span class="hljs-keyword">rpc</span> Search (SearchRequest) <span class="hljs-keyword">returns</span> (SearchResponse)</span>;&gt;     &#125;&gt;</code></pre></li></ol></blockquote><blockquote><ol start="13"><li>JSON Map</li></ol><p>如果一个值在json编码的数据中丢失或者它的值是null, 在被解析成protocol buffer时它将设置为对应的默认值.如果一个字段的值正好是protocol buffer的默认值, 这个字段默认就不会出现在json编码的数据中以便节约空间.</p></blockquote></li><li><p>通过protobuf编译器编译．proto文件（生成对应平台的文件）</p><ul><li>使用命令</li></ul><pre><code class="hljs shell"><span class="hljs-meta">#</span>#命令格式protoc [option] PROTO_FILES<span class="hljs-meta">#</span>#Javaprotoc -I=$SRC_DIR --java_out=$DST_DIR $SRC_DIR/addressbook.proto<span class="hljs-meta">#</span>#Pythonprotoc -I=$SRC_DIR --python_out=$DST_DIR $SRC_DIR/addressbook.proto</code></pre><blockquote><ul><li><p>SRC_DIR:源代码路径，默认为当前文件夹</p></li><li><p>DST_DIR:生成的代码路径，默认与SRC_DIR相同</p></li><li><p>–Java_out:生成不同语言对应的文件</p></li><li><p>对于Android使用Java Lite可以减小生成类的体积</p><p>1.安装java_lite环境</p><p>2.编译java_lite版文件</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span>   protoc --javalite_out=$DST_DIR PROTO_FILES<span class="hljs-meta">&gt;</span></code></pre></li></ul></blockquote><ul><li><p>使用Android Studio</p><ol><li>安装Protocol Support插件</li><li>配置gradle</li><li>编写．proto文件</li><li>编译项目</li></ol><p><img src="https://img2.tuicool.com/AnMFRbi.jpg!web" srcset="/img/loading.gif" alt="img"></p></li></ul></li><li><p>使用protobuf进行数据读写</p><p> 除了访问器，生成的类中还有其它的方法：</p><p> 消息构建接口</p><ul><li><code>isInitialized()</code>:检测 所有<code>required</code>的字段是否有被设置</li><li><code>toString()</code>: 生成可读的字符串</li><li><code>mergeFrom(Message other)</code>: (builder only)与另一个消息进行合并</li><li><p><code>clear()</code>: (builder only) 将所有字段清除为空状态</p><p>解析接口</p></li><li><code>byte[] toByteArray();</code>: 序列化数据</li><li><code>static Person parseFrom(byte[] data);</code>: 反序列化数据</li><li><code>void writeTo(OutputStream output);</code>: 序列化数据并写入<code>OutputStream</code></li><li><code>static Person parseFrom(InputStream input);</code>: 从<code>InputStream</code>中解析读取消息</li></ul><ol start="4"><li>具体Demo</li></ol></li><li><p>兼容处理</p><p>如果要让新版本向后兼容，旧版本向前兼容，需要遵守以下规则</p><ol><li>不能修改已存在字段的标识（tag）</li><li>不能添加或删除<code>required</code>字段</li><li>可以删除<code>optional</code>或<code>repeated</code>字段</li><li>可以增加<code>optional</code>或<code>repeated</code>字段，但必须使用没有用过的标识，已经删除的也不能用</li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo基本命令</title>
    <link href="/2020/03/10/Hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/03/10/Hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><pre><code class="hljs undefined">hexo init [folder]</code></pre><blockquote><p>新建一个网站</p></blockquote><h4 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h4><pre><code class="hljs undefined">hexo new [layout] &lt;title&gt;</code></pre><blockquote><ul><li>新建一个title.md文档</li></ul></blockquote><h4 id="hexo-generate-hexo-g"><a href="#hexo-generate-hexo-g" class="headerlink" title="hexo generate(hexo g)"></a>hexo generate(hexo g)</h4><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">-d, –deploy</td><td style="text-align:left">文件生成后立即部署网站</td></tr><tr><td style="text-align:left">-w, –watch</td><td style="text-align:left">监视文件变动</td></tr><tr><td style="text-align:left">-b, –bail</td><td style="text-align:left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td style="text-align:left">-f, –force</td><td style="text-align:left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td style="text-align:left">-c, –concurrency</td><td style="text-align:left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><blockquote><p>生成网站静态文件到默认设置的 public 文件夹</p></blockquote><h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><pre><code class="hljs undefined">hexo publish [layout] &lt;fileName&gt;</code></pre><blockquote><p>发表草稿</p></blockquote><h4 id="hexo-server-hexo-s"><a href="#hexo-server-hexo-s" class="headerlink" title="hexo server(hexo s)"></a>hexo server(hexo s)</h4><blockquote><p>启动服务器，默认网址为<code>http://localhost:4000/</code></p></blockquote><table><thead><tr><th style="text-align:left">项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">-p, –port</td><td style="text-align:left">重设端口</td></tr><tr><td style="text-align:left">-s, –static</td><td style="text-align:left">只使用静态文件</td></tr><tr><td style="text-align:left">-l, –log</td><td style="text-align:left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h4 id="hexo-deploy-hexo-d"><a href="#hexo-deploy-hexo-d" class="headerlink" title="hexo deploy(hexo d)"></a>hexo deploy(hexo d)</h4><blockquote><p>部署网站到服务器</p></blockquote><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">-g, –generate</td><td style="text-align:left">部署之前预先生成静态文件</td></tr></tbody></table><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><blockquote><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
